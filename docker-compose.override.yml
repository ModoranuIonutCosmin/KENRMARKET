version: '3.4'

services:
  gateway.api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Services__Cart=http://cart.api
      - Services__Customers=http://customers.api
      - Services__Products=http://products.api
      - Services__Orders=http://order.api
      - Services__Payments=http://payments.api
      - ConnectionStrings__SqlServer=Server=host.docker.internal;User ID=local;Password=aaaa1234;Database=Auths;TrustServerCertificate=true
      - ElasticSearch__Uri=http://elasticsearch:9200
    ports:
      - "6001:80"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - cart.api
      - customers.api
      - products.api
      - order.api
      - ordersignalr.api
      - payments.api
      - elasticsearch
      - kibana
  
  
  webstatus:
    container_name: webstatus

    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Services__Cart=http://cart.api
      - Services__Customers=http://customers.api
      - Services__Products=http://products.api
      - Services__Orders=http://order.api
      - Services__Payments=http://payments.api
      - HealthChecksUI__HealthChecks__0__Name=Cart Health Check
      - HealthChecksUI__HealthChecks__0__Uri=http://cart.api/hc
      - HealthChecksUI__HealthChecks__1__Name=Customers Health Check
      - HealthChecksUI__HealthChecks__1__Uri=http://customers.api/hc
      - HealthChecksUI__HealthChecks__2__Name=Products Health Check
      - HealthChecksUI__HealthChecks__2__Uri=http://products.api/hc
      - HealthChecksUI__HealthChecks__3__Name=Ordering Health Check
      - HealthChecksUI__HealthChecks__3__Uri=http://order.api/hc
      - HealthChecksUI__HealthChecks__4__Name=Payments Health Check
      - HealthChecksUI__HealthChecks__4__Uri=http://payments.api/hc
    ports:
      - "6013:80"
    depends_on:
      - cart.api
      - customers.api
      - products.api
      - order.api
      - ordersignalr.api
      - payments.api
      - gateway.api
      - elasticsearch
      - kibana
  cart.api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - EventQueue__Host=messageBroker
      - EventQueue__Username=guest
      - EventQueue__Password=guest
      - ConnectionStrings__SqlServer=Server=host.docker.internal;User ID=local;Password=aaaa1234;Database=Cart;TrustServerCertificate=true
      - ElasticSearch__Uri=http://elasticsearch:9200
    ports:
      - "6002:80"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      messageBroker:
        condition: service_healthy
      elasticsearch:
        condition: service_started
      kibana:
        condition: service_started

  customers.api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - EventQueue__Host=messageBroker
      - EventQueue__Username=guest
      - EventQueue__Password=guest
      - ConnectionStrings__SqlServer=Server=host.docker.internal;User ID=local;Password=aaaa1234;Database=Customers;TrustServerCertificate=true
      - ElasticSearch__Uri=http://elasticsearch:9200
    ports:
      - "6003:80"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      messageBroker:
        condition: service_healthy
      elasticsearch:
        condition: service_started
      kibana:
        condition: service_started
  
  order.api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - EventQueue__Host=messageBroker
      - EventQueue__Username=guest
      - EventQueue__Password=guest
      - ConnectionStrings__SqlServer=Server=host.docker.internal;User ID=local;Password=aaaa1234;Database=Orders;TrustServerCertificate=true
      - ElasticSearch__Uri=http://elasticsearch:9200
    ports:
      - "6005:80"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      messageBroker:
        condition: service_healthy
      elasticsearch:
        condition: service_started
      kibana:
        condition: service_started

  ordersignalr.api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - EventQueue__Host=messageBroker
      - EventQueue__Username=guest
      - EventQueue__Password=guest
      - ElasticSearch__Uri=http://elasticsearch:9200
    ports:
      - "6006:80"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      messageBroker:
        condition: service_healthy
      elasticsearch:
        condition: service_started
      kibana:
        condition: service_started

  payments.api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - EventQueue__Host=messageBroker
      - EventQueue__Username=guest
      - EventQueue__Password=guest
      - ConnectionStrings__SqlServer=Server=host.docker.internal;User ID=local;Password=aaaa1234;Database=Payments;TrustServerCertificate=true
      - ElasticSearch__Uri=http://elasticsearch:9200
    ports:
      - "6007:80"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      messageBroker:
        condition: service_healthy
      elasticsearch:
        condition: service_started
      kibana:
        condition: service_started

  products.api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - EventQueue__Host=messageBroker
      - EventQueue__Username=guest
      - EventQueue__Password=guest
      - ConnectionStrings__Mongo__Host=mongodb://host.docker.internal:27017
      - ElasticSearch__Uri=http://elasticsearch:9200
    ports:
      - "6004:80"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      messageBroker:
        condition: service_healthy
      elasticsearch:
        condition: service_started
      kibana:
        condition: service_started

  messageBroker:
    ports:
      - "4369:4369"
      - "5672:5672"
      - "5671:5671"
      - "15672:15672"
      - "15671:15671"
      - "25672:25672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 25s
      retries: 5
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq